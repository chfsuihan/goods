<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd
     http://www.springframework.org/schema/tx
	 http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	 http://www.springframework.org/schema/aop 
	 http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	 http://www.springframework.org/schema/cache 
	 http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	default-autowire="byName">

	<!-- 自动扫描组件，过滤在springmvc-servlet.xml中配置的controller类，如果不去除会影响事务管理的。-->
	<context:component-scan base-package="com.wondersgroup">
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" />
	</context:component-scan>

	<!-- 隐式注册AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor以及RequiredAnnotationBeanPostProcessor -->
	<context:annotation-config />

	<!-- 开启@AspectJ支持 -->
	<aop:aspectj-autoproxy />

	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="cacheManager" />

	<!-- 配置ehcache与spring整合实现 -->
	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:conf/ehcache.xml" />
	</bean>

	<!-- 声明cacheManager -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="cacheManagerFactory" />
	</bean>

	<!-- 从文件读取hibernate配置 -->
	<context:property-placeholder location="classpath:hibernate.properties" />

	<!-- 配置数据源（JNDI方式） -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="${jndi.data_source}" />
	</bean>

	<!-- Hibernate工厂管理 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/com/wondersgroup/hall</value>
				<value>classpath:/com/wondersgroup/bizhall</value>
				<value>classpath:/com/wondersgroup/bank</value>
				<value>classpath:/com/wondersgroup/common</value>
			</list>
		</property>
		<property name="annotatedClasses">
            <list>
                <value>com.wondersgroup.bizhall.business.bo.DicHall</value>
                <value>com.wondersgroup.bizhall.business.bo.DicHallAppoint</value>
                <value>com.wondersgroup.bizhall.business.bo.HallAppointInfo</value>
                <value>com.wondersgroup.bizhall.business.bo.SysOrganSequenceNo</value>
            </list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>
			</props>
		</property>
		<property name="lobHandler" ref="${jdbc.handler}" />
	</bean>
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler"></bean>
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.SimpleNativeJdbcExtractor"
		lazy-init="true" />

	<!-- Hibernate事务管理 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 通过注解声明事务 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 通过配置声明事务 -->
	<!-- 
		<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManagerr">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		</bean>
		
		<aop:config>
		<aop:advisor pointcut="execution(* net.yc..*.service.*Service.*(..))" advice-ref="txAdvice" />
		</aop:config>
		
		<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		<tx:method name="get*" read-only="true" />
		<tx:method name="query*" read-only="true" />
		<tx:method name="find*" read-only="true" />
		<tx:method name="load*" read-only="true" />
		<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
		</tx:advice>
	-->
</beans>
